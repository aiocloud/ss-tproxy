#!/usr/bin/env bash
source /etc/ss-tproxy/ss-tproxy.conf
[[ "$PROXYTCP" == "true" ]] && source /etc/ss-tproxy/tcpnodes/$TCP_NODE
[[ "$PROXYUDP" == "true" ]] && source /etc/ss-tproxy/udpnodes/$UDP_NODE

echo=echo
for cmd in echo /bin/echo; do
    $cmd >/dev/null 2>&1 || continue

    if ! $cmd -e "" | grep -qE '^-e'; then
        echo=$cmd
        break
    fi
done

CSI=$($echo -e "\033[")
CEND="${CSI}0m"
CDGREEN="${CSI}32m"
CRED="${CSI}1;31m"
CGREEN="${CSI}1;32m"
CYELLOW="${CSI}1;33m"
CBLUE="${CSI}1;34m"
CMAGENTA="${CSI}1;35m"
CCYAN="${CSI}1;36m"

OUT_ALERT() {
    echo -e "${CYELLOW}$1${CEND}"
}

OUT_ERROR() {
    echo -e "${CRED}$1${CEND}"

    exit 1
}

OUT_INFO() {
    echo -e "${CCYAN}$1${CEND}"
}

IsIPv4() {
    [ $(grep -Ec '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$' <<<"$1") -ne 0 ]
}

create_client() {
    if [[ "$PROXYUDP" == "true" ]]; then
            if [[ "$UDP_TYPE" == "Shadowsocks" ]]; then
            ss-redir -s "$UDP_ADDR" -p "$UDP_PORT" -k "$UDP_PASS" -m "$UDP_CIPH" -b 0.0.0.0 -l 60080 -t 300 -U </dev/null &>>/tmp/redir.log &
        elif [[ "$UDP_TYPE" == "ShadowsocksR" ]]; then
            ssr-redir -s "$UDP_ADDR" -p "$UDP_PORT" -k "$UDP_PASS" -m "$UDP_CIPH" -O "$UDP_PROT" -G "$UDP_PROTPARAM" -o "$UDP_OBFS" -g "$UDP_OBFSPARAM" -b 0.0.0.0 -l 60080 -t 300 -U </dev/null &>>/tmp/redir.log &
        else
            OUT_ERROR "不支持的 UDP 代理类型"
        fi
    fi

    for ((i = 1; i <= $TCP_PROC; i++)); do
        if [[ "$TCP_TYPE" == "Shadowsocks" ]]; then
            ss-redir -s "$TCP_ADDR" -p "$TCP_PORT" -k "$TCP_PASS" -m "$TCP_CIPH" -b 0.0.0.0 -l 60080 -t 300 --reuse-port --fast-open </dev/null &>>/tmp/redir.log &
        elif [[ "$TCP_TYPE" == "ShadowsocksR" ]]; then
            ssr-redir -s "$TCP_ADDR" -p "$TCP_PORT" -k "$TCP_PASS" -m "$TCP_CIPH" -O "$TCP_PROT" -G "$TCP_PROTPARAM" -o "$TCP_OBFS" -g "$TCP_OBFSPARAM" -b 0.0.0.0 -l 60080 -t 300 </dev/null &>>/tmp/redir.log &
        else
            OUT_ERROR "不支持的 TCP 代理类型"
        fi
    done
}

delete_client() {
    killall ss-redir > /dev/null 2>&1
    killall ssr-redir > /dev/null 2>&1
}

create_ipforward() {
    sysctl -w net.ipv4.ip_forward=1 > /dev/null
}

delete_icmpredir() {
    for ethernet in $(ls /proc/sys/net/ipv4/conf); do
        sysctl -w "net.ipv4.conf.$ethernet.send_redirects=0" > /dev/null
    done
}

create_chnroute() {
    ipset restore < /etc/ss-tproxy/privaddr.set
    ipset restore < /etc/ss-tproxy/chnroute.set
}

delete_chnroute() {
    ipset destroy privaddr &>/dev/null
    ipset destroy chnroute &>/dev/null
}

update_chnroute() {
    wget -O /etc/ss-tproxy/chnroute.ips https://raw.githubusercontent.com/17mon/china_ip_list/master/china_ip_list.txt || FATL "下载 chnroute 失败！"

    {
        echo "create chnroute hash:net family inet hashsize 2048 maxelem 65536"
        for addr in `cat /etc/ss-tproxy/chnroute.ips`; do
            echo "add chnroute $addr"
        done
    } > /etc/ss-tproxy/chnroute.set

    rm -f /etc/ss-tproxy/chnroute.ips
}

create_dns2tcp() {
    if [ -f "/usr/bin/dns2tcp" ]; then
        dns2tcp -L "$CLIENTDNS" -R "$REMOTEDNS" </dev/null &>>/tmp/dns2tcp.log &
    fi
}

delete_dns2tcp() {
    killall dns2tcp > /dev/null 2>&1
}

create_iptables() {
    if [[ "$PROXYTCP" == "true" ]]; then
        iptables -t nat -N SSTP_RULE
        iptables -t nat -N SSTP_OUTPUT
        [[ "$PROXYOTHER" == "true" ]] && iptables -t nat -N SSTP_PREROUTING
        [[ "$PROXYOTHER" == "true" ]] && iptables -t nat -N SSTP_POSTROUTING

        for drthost in "${DIRECT_LAN[@]}"; do
            iptables -t nat -A SSTP_RULE -s $drthost -j RETURN
        done

        for drthost in "${DIRECT_IP[@]}"; do
            iptables -t nat -A SSTP_RULE -d $drthost -j RETURN
        done

        for drthost in "${DIRECT_DNS[@]}"; do
            iptables -t nat -A SSTP_RULE -d $drthost -j RETURN
        done

        iptables -t nat -A SSTP_RULE -m set --match-set privaddr dst -j RETURN
        iptables -t nat -A SSTP_RULE -m set --match-set chnroute dst -j RETURN
        iptables -t nat -A SSTP_RULE -p tcp -j REDIRECT --to-ports 60080

        [[ "$PROXYSELF"  == "true" ]] && iptables -t nat -A SSTP_OUTPUT      -m addrtype   --src-type LOCAL ! --dst-type LOCAL -p tcp          -j SSTP_RULE
        [[ "$PROXYOTHER" == "true" ]] && iptables -t nat -A SSTP_PREROUTING  -m addrtype ! --src-type LOCAL ! --dst-type LOCAL -p tcp          -j SSTP_RULE
        [[ "$PROXYOTHER" == "true" ]] && iptables -t nat -A SSTP_POSTROUTING -m addrtype ! --src-type LOCAL -m conntrack --ctstate SNAT,DNAT   -j RETURN
        [[ "$PROXYOTHER" == "true" ]] && iptables -t nat -A SSTP_POSTROUTING -m addrtype ! --src-type LOCAL -p tcp                             -j MASQUERADE
        [[ "$PROXYOTHER" == "true" ]] && iptables -t nat -A SSTP_POSTROUTING -m addrtype ! --src-type LOCAL -p udp                             -j MASQUERADE
        [[ "$PROXYOTHER" == "true" ]] && iptables -t nat -A SSTP_POSTROUTING -m addrtype ! --src-type LOCAL -p icmp                            -j MASQUERADE

        [[ "$PROXYSELF"  == "true" ]] && iptables -t nat -A OUTPUT -j SSTP_OUTPUT
        [[ "$PROXYOTHER" == "true" ]] && iptables -t nat -A PREROUTING -j SSTP_PREROUTING
        [[ "$PROXYOTHER" == "true" ]] && iptables -t nat -A POSTROUTING -j SSTP_POSTROUTING
    fi

    if [[ "$PROXYUDP" == "true" ]]; then
        ip -4 route add local default dev lo table 100
        ip -4 rule  add fwmark 0x01          table 100

        iptables -t mangle -N SSTP_RULE
        [[ "$PROXYSELF"  == "true" ]] && iptables -t mangle -N SSTP_OUTPUT
        [[ "$PROXYOTHER" == "true" ]] && iptables -t mangle -N SSTP_PREROUTING

        iptables -t mangle -A SSTP_RULE -j CONNMARK --restore-mark
        iptables -t mangle -A SSTP_RULE -m mark --mark 0x01 -j RETURN

        for drthost in "${DIRECT_LAN[@]}"; do
            iptables -t mangle -A SSTP_RULE -s $drthost -j RETURN
        done

        for drthost in "${DIRECT_IP[@]}"; do
            iptables -t mangle -A SSTP_RULE -d $drthost -j RETURN
        done

        for drthost in "${DIRECT_DNS[@]}"; do
            iptables -t mangle -A SSTP_RULE -d $drthost -j RETURN
        done

        iptables -t mangle -A SSTP_RULE -m set --match-set privaddr dst -j RETURN
        iptables -t mangle -A SSTP_RULE -m set --match-set chnroute dst -j RETURN
        iptables -t mangle -A SSTP_RULE -p udp -m conntrack --ctstate NEW -j MARK --set-mark 0x01
        iptables -t mangle -A SSTP_RULE -j CONNMARK --save-mark

        [[ "$PROXYSELF"  == "true" ]] && iptables -t mangle -A SSTP_OUTPUT     -m addrtype   --src-type LOCAL ! --dst-type LOCAL -p udp -j SSTP_RULE
        [[ "$PROXYOTHER" == "true" ]] && iptables -t mangle -A SSTP_PREROUTING -m mark !     --mark 0x01                         -i lo  -j RETURN
        [[ "$PROXYOTHER" == "true" ]] && iptables -t mangle -A SSTP_PREROUTING -m addrtype ! --src-type LOCAL ! --dst-type LOCAL -p udp -j SSTP_RULE
        [[ "$PROXYOTHER" == "true" ]] && iptables -t mangle -A SSTP_PREROUTING -m mark       --mark 0x01                         -p udp -j TPROXY --on-port 60080 --on-ip 127.0.0.1

        [[ "$PROXYSELF"  == "true" ]] && iptables -t mangle -A OUTPUT     -j SSTP_OUTPUT
        [[ "$PROXYOTHER" == "true" ]] && iptables -t mangle -A PREROUTING -j SSTP_PREROUTING
    fi
}

delete_iptables() {
    iptables -t nat -D POSTROUTING -j SSTP_POSTROUTING > /dev/null 2>&1
    iptables -t nat -D PREROUTING -j SSTP_PREROUTING   > /dev/null 2>&1
    iptables -t nat -D OUTPUT -j SSTP_OUTPUT           > /dev/null 2>&1
    iptables -t nat -F SSTP_POSTROUTING                > /dev/null 2>&1
    iptables -t nat -F SSTP_PREROUTING                 > /dev/null 2>&1
    iptables -t nat -F SSTP_OUTPUT                     > /dev/null 2>&1
    iptables -t nat -F SSTP_RULE                       > /dev/null 2>&1
    iptables -t nat -X SSTP_POSTROUTING                > /dev/null 2>&1
    iptables -t nat -X SSTP_PREROUTING                 > /dev/null 2>&1
    iptables -t nat -X SSTP_OUTPUT                     > /dev/null 2>&1
    iptables -t nat -X SSTP_RULE                       > /dev/null 2>&1

    iptables -t mangle -D PREROUTING -j SSTP_PREROUTING > /dev/null 2>&1
    iptables -t mangle -D OUTPUT     -j SSTP_OUTPUT     > /dev/null 2>&1
    iptables -t mangle -F SSTP_PREROUTING               > /dev/null 2>&1
    iptables -t mangle -F SSTP_OUTPUT                   > /dev/null 2>&1
    iptables -t mangle -F SSTP_RULE                     > /dev/null 2>&1
    iptables -t mangle -X SSTP_PREROUTING               > /dev/null 2>&1
    iptables -t mangle -X SSTP_OUTPUT                   > /dev/null 2>&1
    iptables -t mangle -X SSTP_RULE                     > /dev/null 2>&1

    ip -4 rule  del   table 100 > /dev/null 2>&1
    ip -4 route flush table 100 > /dev/null 2>&1
}

create() {
    until ping -4 -nq -c1 -W1 114.114.114.114 >/dev/null; do
        OUT_ALERT "正在等待网络中 ..."
        sleep 1
    done

    delete_iptables
    delete_chnroute
    delete_dns2tcp
    delete_client

    DIRECT_IP=()
    for drthost in "${DIRECT[@]}"; do
        if IsIPv4 "$drthost"; then
            DIRECT_IP+=("$drthost")
        else
            drtaddr=`dig "@$DNS" +short "A" "$drthost" | grep -Ev '^;|\.$' | head -n1`

            if ! IsIPv4 "$drtaddr"; then
                OUT_ERROR "无法解析 $drthost 域名"
                exit 1
            fi

            DIRECT_IP+=("$drtaddr")
        fi
    done

    if [[ "$PROXYTCP" == "true" ]]; then
        if ! IsIPv4 "$TCP_ADDR"; then
            TCP_ADDR=`dig "@$DNS" +short "A" $(echo "$TCP_ADDR" | awk -F ':' '{print $1}') | grep -Ev '^;|\.$' | head -n1`
            DIRECT_IP+=("$TCP_ADDR")
        fi
    fi

    if [[ "$PROXYUDP" == "true" ]]; then
        if ! IsIPv4 "$UDP_ADDR"; then
            UDP_ADDR=`dig "@$DNS" +short "A" $(echo "$UDP_ADDR" | awk -F ':' '{print $1}') | grep -Ev '^;|\.$' | head -n1`
            DIRECT_IP+=("$UDP_ADDR")
        fi
    fi

    create_ipforward
    delete_icmpredir

    create_client
    create_dns2tcp
    create_chnroute
    create_iptables
}

delete() {
    delete_iptables
    delete_chnroute
    delete_dns2tcp
    delete_client

    # iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
}

reboot() {
    delete
    create
}

status() {
    [ $(netstat -lnpt | grep -E ":60080[ \t]" | wc -l) -ne 0 ] && echo "pxy/tcp: $CGREEN[running]$CEND" || echo "pxy/tcp: $CRED[stopped]$CEND"
    [ $(netstat -anpu | grep -E ":60080[ \t]" | wc -l) -ne 0 ] && echo "pxy/udp: $CGREEN[running]$CEND" || echo "pxy/udp: $CRED[stopped]$CEND"
}

help() {
    echo "ss-tproxy create"
    echo "ss-tproxy delete"
    echo "ss-tproxy reboot"
    echo "ss-tproxy status"
    echo "ss-tproxy delete-iptables"
    echo "ss-tproxy delete-chnroute"
    echo "ss-tproxy update-chnroute"
}

case "$1" in
    create)          create; sleep 2; status;;
    delete)          delete; sleep 2; status;;
    reboot)          reboot; sleep 2; status;;
    status)          status;;
    delete-iptables) delete_iptables;;
    delete-chnroute) delete_chnroute;;
    update-chnroute) update_chnroute;;
    *) help;;
esac

exit 0
